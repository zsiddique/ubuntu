.\" Man page generated from reStructeredText.
.
.TH VCL 7 "2010-06-02" "1.0" ""
.SH NAME
VCL \- Varnish Configuration Language
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH DESCRIPTION
.sp
The VCL language is a small domain\-specific language designed to be
used to define request handling and document caching policies for the
Varnish HTTP accelerator.
.sp
When a new configuration is loaded, the varnishd management process
translates the VCL code to C and compiles it to a shared object which
is then dynamically linked into the server process.
.SH SYNTAX
.sp
The VCL syntax is very simple, and deliberately similar to C and Perl.
Blocks are delimited by curly braces, statements end with semicolons,
and comments may be written as in C, C++ or Perl according to your own
preferences.
.sp
In addition to the C\-like assignment (=), comparison (==) and boolean
(!, && and ||) operators, VCL supports regular expression and ACL
matching using the ~ operator.
.sp
Unlike C and Perl, the backslash () character has no special meaning
in strings in VCL, which use the (%xx) escape mechanism just like
URLs, so it can be freely used in regular expressions without
doubling.
.sp
Strings are concatenated by just putting them one after each other
without any operator in between.
.sp
Assignments are introduced with the \fIset\fP keyword.  There are no
user\-defined variables; values can only be assigned to variables
attached to backend, request or document objects.  Most of these are
typed, and the values assigned to them must have a compatible unit
suffix.
.sp
You can use the \fIset\fP keyword to arbitrary HTTP headers. You can
remove headers with the \fIremove\fP or \fIunset\fP keywords, which are
synonym.
.sp
The return(action) keyword terminates the subroutine. \fIaction\fP can be,
depending on context one of
.INDENT 0.0
.IP \(bu 2
.
deliver
.IP \(bu 2
.
error
.IP \(bu 2
.
fetch
.IP \(bu 2
.
hash
.IP \(bu 2
.
lookup
.IP \(bu 2
.
pass
.IP \(bu 2
.
pipe
.IP \(bu 2
.
restart
.UNINDENT
.sp
Please see the list of subroutines to see what return actions are
available where.
.sp
VCL has if tests, but no loops.
.sp
You may log arbitrary strings to the shared memory log with the
keyword \fIlog\fP.
.sp
The contents of another VCL file may be inserted at any point in the
code by using the \fIinclude\fP keyword followed by the name of the other
file as a quoted string.
.SS Backend declarations
.sp
A backend declaration creates and initializes a named backend object::
.sp
.nf
.ft C
backend www {
  .host = "www.example.com";
  .port = "http";
}
.ft P
.fi
.sp
The backend object can later be used to select a backend at request time::
.sp
.nf
.ft C
if (req.http.host ~ "^(www.)?example.com$") {
  set req.backend = www;
}
.ft P
.fi
.sp
To avoid overloading backend servers, .max_connections can be set to
limit the maximum number of concurrent backend connections.
.sp
The timeout parameters can be overridden in the backend declaration.
The timeout parameters are .connect_timeout for the time to wait for a
backend connection, .first_byte_timeout for the time to wait for the
first byte from the backend and .between_bytes_timeout for time to
wait between each received byte.
.sp
These can be set in the declaration like this::
.sp
.nf
.ft C
backend www {
  .host = "www.example.com";
  .port = "http";
  .connect_timeout = 1s;
  .first_byte_timeout = 5s;
  .between_bytes_timeout = 2s;
}
.ft P
.fi
.sp
To mark a backend as unhealthy after number of items have been added
to it\(aqs saintmode list .saintmode_threshold can be set to the maximum
list size. Setting a value of 0 disables saintmode checking entirely
for that backend.  The value in the backend declaration overrides the
parameter.
.SS Directors
.sp
A director is a logical group of backend servers clustered together
for redundancy. The basic role of the director is to let Varnish
choose a backend server amongst several so if one is down another can
be used.
.sp
There are several types of directors. The different director types
use different algorithms to choose which backend to use.
.sp
Configuring a director may look like this::
.sp
.nf
.ft C
director b2 random {
  .retries = 5;
  {
    // We can refer to named backends
    .backend = b1;
    .weight  = 7;
  }
  {
    // Or define them inline
    .backend  = {
      .host = "fs2";
    }
  .weight         = 3;
  }
}
.ft P
.fi
.SS The random director
.sp
The random director takes one per director option .retries.  This
specifies how many tries it will use to find a working backend.  The
default is the same as the number of backends defined for the
director.
.sp
There is also a per\-backend option: weight which defines the portion
of traffic to send to the particular backend.
.SS The round\-robin director
.sp
The round\-robin director does not take any options.
.SS The client director
.sp
The client director picks a backend based on the clients
\fIidentity\fP. You can set the VCL variable \fIclient.identity\fP to identify
the client by picking up the value of a session cookie or similar.
.sp
Note: in 2.1 \fIclient.identity\fP isn\(aqt available and the director will
use client.ip to distribute clients across backends.
.sp
The client director takes one option \- \fIretries\fP which set the number
of retries the director should take in order to find a healthy
backend.
.SS The hash director
.sp
The hash director will pick a backend based on the URL hash
value.
.sp
This is useful is you are using Varnish to load balance in front of
other Varnish caches or other web accelerators as objects won\(aqt be
duplicated across caches.
.sp
The client director takes one option \- \fIretries\fP which set the number
of retries the director should take in order to find a healthy
backend.
.SS The DNS director
.sp
The DNS director can use backends in three different ways. Either like the
random or round\-robin director or using .list:
.sp
.nf
.ft C
director directorname dns {
        .list = {
                .host_header = "www.example.com";
                .port = "80";
                .connect_timeout = 0.4;
                "192.168.15.0"/24;
                "192.168.16.128"/25;
        }
        .ttl = 5m;
        .suffix = "internal.example.net";
}
.ft P
.fi
.sp
This will specify 384 backends, all using port 80 and a connection timeout
of 0.4s. Options must come before the list of IPs in the .list statement.
.sp
The .ttl defines the cache duration of the DNS lookups.
.sp
The above example will append "internal.example.net" to the incoming Host
header supplied by the client, before looking it up. All settings are
optional.
.SS Backend probes
.sp
Backends can be probed to see whether they should be considered
healthy or not.  The return status can also be checked by using
req.backend.healthy .window is how many of the latest polls we
examine, while .threshold is how many of those must have succeeded for
us to consider the backend healthy.  .initial is how many of the
probes are considered good when Varnish starts \- defaults to the same
amount as the threshold.
.sp
A backend with a probe can be defined like this::
.sp
.nf
.ft C
backend www {
  .host = "www.example.com";
  .port = "http";
  .probe = {
    .url = "/test.jpg";
    .timeout = 0.3 s;
    .window = 8;
    .threshold = 3;
    .initial = 3;
  }
}
.ft P
.fi
.sp
It is also possible to specify the raw HTTP request:
.sp
.nf
.ft C
backend www {
  .host = "www.example.com";
  .port = "http";
  .probe = {
    # NB: \er\en automatically inserted after each string!
    .request =
      "GET / HTTP/1.1"
      "Host: www.foo.bar"
      "Connection: close";
  }
}
.ft P
.fi
.SS ACLs
.sp
An ACL declaration creates and initializes a named access control list
which can later be used to match client addresses::
.sp
.nf
.ft C
acl local {
  "localhost";         // myself
  "192.0.2.0"/24;      // and everyone on the local network
  ! "192.0.2.23";      // except for the dialin router
}
.ft P
.fi
.sp
If an ACL entry specifies a host name which Varnish is unable to
resolve, it will match any address it is com‚Äê pared to.  Consequently,
if it is preceded by a negation mark, it will reject any address it is
compared to, which may not be what you intended.  If the entry is
enclosed in parentheses, however, it will simply be ignored.
.sp
To match an IP address against an ACL, simply use the match operator::
.sp
.nf
.ft C
if (client.ip ~ local) {
  return (pipe);
}
.ft P
.fi
.SS Functions
.sp
The following built\-in functions are available:
.INDENT 0.0
.TP
.B hash_data(str)
.
Adds a string to the hash input. In default.vcl hash_data() is
called on the host and URL of the \fIrequest\fP.
.TP
.B regsub(str, regex, sub)
.
Returns a copy of str with the first occurrence of the regular
expression regex replaced with sub. Within sub, 0 (which can
also be spelled &) is replaced with the entire matched string,
and n is replaced with the contents of subgroup n in the
matched string.
.TP
.B regsuball(str, regex, sub)
.
As regsuball() but this replaces all occurrences.
.TP
.B purge_url(regex)
.
Purge all objects in cache whose URLs match regex.
.UNINDENT
.SS Subroutines
.sp
A subroutine is used to group code for legibility or reusability::
.sp
.nf
.ft C
sub pipe_if_local {
  if (client.ip ~ local) {
    return (pipe);
  }
}
.ft P
.fi
.sp
Subroutines in VCL do not take arguments, nor do they return values.
.sp
To call a subroutine, use the call keyword followed by the subroutine\(aqs name:
.sp
call pipe_if_local;
.sp
There are a number of special subroutines which hook into the Varnish
workflow.  These subroutines may inspect and manipulate HTTP headers
and various other aspects of each request, and to a certain extent
decide how the request should be handled.  Each subroutine terminates
by calling one of a small number of keywords which indicates the
desired outcome.
.INDENT 0.0
.TP
.B vcl_recv
.
Called at the beginning of a request, after the complete request has
been received and parsed.  Its purpose is to decide whether or not
to serve the request, how to do it, and, if applicable, which backend
to use.
.sp
The vcl_recv subroutine may terminate with calling return() on one of
the following keywords:
.INDENT 7.0
.TP
.B error code [reason]
.
Return the specified error code to the client and abandon the request.
.TP
.B pass
.
Switch to pass mode.  Control will eventually pass to vcl_pass.
.TP
.B pipe
.
Switch to pipe mode.  Control will eventually pass to vcl_pipe.
.TP
.B lookup
.
Look up the requested object in the cache.  Control will
eventually pass to vcl_hit or vcl_miss, depending on whether the
object is in the cache.
.UNINDENT
.TP
.B vcl_pipe
.
Called upon entering pipe mode.  In this mode, the request is passed
on to the backend, and any further data from either client or
backend is passed on unaltered until either end closes the
connection.
.sp
The vcl_pipe subroutine may terminate with calling return() with one of
the following keywords:
.INDENT 7.0
.TP
.B error code [reason]
.
Return the specified error code to the client and abandon the request.
.TP
.B pipe
.
Proceed with pipe mode.
.UNINDENT
.TP
.B vcl_pass
.
Called upon entering pass mode.  In this mode, the request is passed
on to the backend, and the backend\(aqs response is passed on to the
client, but is not entered into the cache.  Subsequent requests sub‚Äê
mitted over the same client connection are handled normally.
.sp
The vcl_recv subroutine may terminate with calling return() with one of
the following keywords:
.INDENT 7.0
.TP
.B error code [reason]
.
Return the specified error code to the client and abandon the request.
.TP
.B pass
.
Proceed with pass mode.
.TP
.B restart
.
Restart the transaction. Increases the restart counter. If the number
of restarts is higher than \fImax_restarts\fP varnish emits a guru meditation
error.
.UNINDENT
.TP
.B vcl_hash
.
You may call hash_data() on the data you would like to add to the hash.
.sp
The vcl_hash subroutine may terminate with calling return() with one of
the following keywords:
.INDENT 7.0
.TP
.B hash
.
Proceed.
.UNINDENT
.TP
.B vcl_hit
.
Called after a cache lookup if the requested document was found in the cache.
.sp
The vcl_hit subroutine may terminate with calling return() with one of
the following keywords:
.INDENT 7.0
.TP
.B deliver
.
Deliver the cached object to the client.  Control will eventually
pass to vcl_deliver.
.TP
.B error code [reason]
.
Return the specified error code to the client and abandon the request.
.TP
.B pass
.
Switch to pass mode.  Control will eventually pass to vcl_pass.
.TP
.B restart
.
Restart the transaction. Increases the restart counter. If the number
of restarts is higher than \fImax_restarts\fP varnish emits a guru meditation
error.
.UNINDENT
.TP
.B vcl_miss
.
Called after a cache lookup if the requested document was not found
in the cache.  Its purpose is to decide whether or not to attempt to
retrieve the document from the backend, and which backend to use.
.sp
The vcl_miss subroutine may terminate with calling return() with one of
the following keywords:
.INDENT 7.0
.TP
.B error code [reason]
.
Return the specified error code to the client and abandon the request.
.TP
.B pass
.
Switch to pass mode.  Control will eventually pass to vcl_pass.
.TP
.B fetch
.
Retrieve the requested object from the backend.  Control will
eventually pass to vcl_fetch.
.UNINDENT
.TP
.B vcl_fetch
.
Called after a document has been successfully retrieved from the backend.
.sp
The vcl_fetch subroutine may terminate with calling return() with
one of the following keywords:
.INDENT 7.0
.TP
.B deliver
.
Possibly insert the object into the cache, then deliver it to the
client.  Control will eventually pass to vcl_deliver.
.TP
.B error code [reason]
.
Return the specified error code to the client and abandon the request.
.TP
.B esi
.
ESI\-process the document which has just been fetched.
.TP
.B pass
.
Switch to pass mode.  Control will eventually pass to vcl_pass.
.TP
.B restart
.
Restart the transaction. Increases the restart counter. If the number
of restarts is higher than \fImax_restarts\fP varnish emits a guru meditation
error.
.UNINDENT
.TP
.B vcl_deliver
.
Called before a cached object is delivered to the client.
.sp
The vcl_deliver subroutine may terminate with one of the following
keywords:
.INDENT 7.0
.TP
.B deliver
.
Deliver the object to the client.
.TP
.B error code [reason]
.
Return the specified error code to the client and abandon the request.
.TP
.B restart
.
Restart the transaction. Increases the restart counter. If the number
of restarts is higher than \fImax_restarts\fP varnish emits a guru meditation
error.
.UNINDENT
.TP
.B vcl_error
.
Called when we hit an error, either explicitly or implicitly due to
backend or internal errors.
.sp
The vcl_error subroutine may terminate by calling return with one of
the following keywords:
.INDENT 7.0
.TP
.B deliver
.
Deliver the error object to the client.
.TP
.B restart
.
Restart the transaction. Increases the restart counter. If the number
of restarts is higher than \fImax_restarts\fP varnish emits a guru meditation
error.
.UNINDENT
.UNINDENT
.sp
If one of these subroutines is left undefined or terminates without
reaching a handling decision, control will be handed over to the
builtin default.  See the EXAMPLES section for a listing of the
default code.
.SS Multiple subroutines
.sp
If multiple subroutines with the same name are defined, they are
concatenated in the order in which the appear in the source.
.sp
Example::
.sp
.nf
.ft C
# in file "main.vcl"
include "backends.vcl";
include "purge.vcl";

# in file "backends.vcl"
sub vcl_recv {
  if (req.http.host ~ "example.com") {
    set req.backend = foo;
  } elsif (req.http.host ~ "example.org") {
    set req.backend = bar;
  }
}

# in file "purge.vcl"
sub vcl_recv {
  if (client.ip ~ admin_network) {
    if (req.http.Cache\-Control ~ "no\-cache") {
      purge_url(req.url);
    }
  }
}
.ft P
.fi
.sp
The builtin default subroutines are implicitly appended in this way.
.SS Variables
.sp
Although subroutines take no arguments, the necessary information is
made available to the handler subroutines through global variables.
.sp
The following variables are always available:
.INDENT 0.0
.TP
.B now
.
The current time, in seconds since the epoch.
.UNINDENT
.sp
The following variables are available in backend declarations:
.INDENT 0.0
.TP
.B .host
.sp
Host name or IP address of a backend.
.TP
.B .port
.sp
Service name or port number of a backend.
.UNINDENT
.sp
The following variables are available while processing a request:
.INDENT 0.0
.TP
.B client.ip
.
The client\(aqs IP address.
.TP
.B server.hostname
.
The host name of the server.
.TP
.B server.identity
.
The identity of the server, as set by the \-i
parameter.  If the \-i parameter is not passed to varnishd,
server.identity will be set to the name of the instance, as
specified by the \-n parameter.
.TP
.B server.ip
.
The IP address of the socket on which the client connection was received.
.TP
.B server.port
.
The port number of the socket on which the client connection was received.
.TP
.B req.request
.
The request type (e.g. "GET", "HEAD").
.TP
.B req.url
.
The requested URL.
.TP
.B req.proto
.
The HTTP protocol version used by the client.
.TP
.B req.backend
.
The backend to use to service the request.
.TP
.B req.backend.healthy
.
Whether the backend is healthy or not. Requires an active probe to be set
on the backend.
.TP
.B req.http.header
.
The corresponding HTTP header.
.TP
.B req.hash_always_miss
.
Force a cache miss for this request. If set to true Varnish will disregard
any existing objects and always (re)fetch from the backend.
.TP
.B req.hash_ignore_busy
.
Ignore any busy object during cache lookup. You would want to do
this if you have two server looking up content from each other to
avoid potential deadlocks.
.UNINDENT
.sp
The following variables are available while preparing a backend
request (either for a cache miss or for pass or pipe mode):
.INDENT 0.0
.TP
.B bereq.request
.
The request type (e.g. "GET", "HEAD").
.TP
.B bereq.url
.
The requested URL.
.TP
.B bereq.proto
.
The HTTP protocol version used to talk to the server.
.TP
.B bereq.http.header
.
The corresponding HTTP header.
.TP
.B bereq.connect_timeout
.
The time in seconds to wait for a backend connection.
.TP
.B bereq.first_byte_timeout
.
The time in seconds to wait for the first byte from the backend.  Not
available in pipe mode.
.TP
.B bereq.between_bytes_timeout
.
The time in seconds to wait between each received byte from the
backend.  Not available in pipe mode.
.UNINDENT
.sp
The following variables are available after the requested object has
been retrieved from the backend, before it is entered into the cache. In
other words, they are available in vcl_fetch:
.INDENT 0.0
.TP
.B beresp.proto
.
The HTTP protocol version used when the object was retrieved.
.TP
.B beresp.status
.
The HTTP status code returned by the server.
.TP
.B beresp.response
.
The HTTP status message returned by the server.
.TP
.B beresp.cacheable
.
True if the request resulted in a cacheable response. A response is
considered cacheable if HTTP status code is 200, 203, 300, 301, 302,
404 or 410 and pass wasn\(aqt called in vcl_recv. If however, both the
TTL and the grace time for the response are 0 beresp.cacheable will
be 0.
.sp
beresp.cacheable is writable.
.TP
.B beresp.ttl
.
The object\(aqs remaining time to live, in seconds. beresp.ttl is writable.
.UNINDENT
.sp
After the object is entered into the cache, the following (mostly
read\-only) variables are available when the object has been located in
cache, typically in vcl_hit and vcl_deliver.
.INDENT 0.0
.TP
.B obj.proto
.
The HTTP protocol version used when the object was retrieved.
.TP
.B obj.status
.
The HTTP status code returned by the server.
.TP
.B obj.response
.
The HTTP status message returned by the server.
.TP
.B obj.cacheable
.
True if the object had beresp.cacheable. Unless you\(aqve forced delivery
in your VCL obj.cacheable will always be true.
.TP
.B obj.ttl
.
The object\(aqs remaining time to live, in seconds. obj.ttl is writable.
.TP
.B obj.lastuse
.
The approximate time elapsed since the object was last requests, in
seconds.
.TP
.B obj.hits
.
The approximate number of times the object has been delivered. A value
of 0 indicates a cache miss.
.UNINDENT
.sp
The following variables are available while determining the hash key
of an object:
.INDENT 0.0
.TP
.B req.hash
.
The hash key used to refer to an object in the cache.  Used when
both reading from and writing to the cache.
.UNINDENT
.sp
The following variables are available while preparing a response to the client:
.INDENT 0.0
.TP
.B resp.proto
.
The HTTP protocol version to use for the response.
.TP
.B resp.status
.
The HTTP status code that will be returned.
.TP
.B resp.response
.
The HTTP status message that will be returned.
.TP
.B resp.http.header
.
The corresponding HTTP header.
.UNINDENT
.sp
Values may be assigned to variables using the set keyword::
.sp
.nf
.ft C
sub vcl_recv {
  # Normalize the Host: header
  if (req.http.host ~ "^(www.)?example.com$") {
    set req.http.host = "www.example.com";
  }
}
.ft P
.fi
.sp
HTTP headers can be removed entirely using the remove keyword::
.sp
.nf
.ft C
sub vcl_fetch {
  # Don\(aqt cache cookies
  remove beresp.http.Set\-Cookie;
}
.ft P
.fi
.SS Grace and saint mode
.sp
If the backend takes a long time to generate an object there is a risk
of a thread pile up.  In order to prevent this you can enable \fIgrace\fP.
This allows varnish to serve an expired version of the object while a
fresh object is being generated by the backend.
.sp
The following vcl code will make Varnish serve expired objects.  All
object will be kept up to two minutes past their expiration time or a
fresh object is generated.:
.sp
.nf
.ft C
sub vcl_recv {
  set req.grace = 2m;
}
sub vcl_fetch {
  set beresp.grace = 2m;
}
.ft P
.fi
.sp
Saint mode is similar to grace mode and relies on the same
infrastructure but functions differently. You can add VCL code to
vcl_fetch to see whether or not you \fIlike\fP the response coming from
the backend. If you find that the response is not appropriate you can
set beresp.saintmode to a time limit and call \fIrestart\fP. Varnish will
then retry other backends to try to fetch the object again.
.sp
If there are no more backends or if you hit \fImax_restarts\fP and we have
an object that is younger than what you set beresp.saintmode to be
Varnish will serve the object, even if it is stale.
.SH EXAMPLES
.sp
The following code is the equivalent of the default configuration with
the backend address set to "backend.example.com" and no backend port
specified::
.sp
.nf
.ft C
backend default {
 .host = "backend.example.com";
 .port = "http";
}
.ft P
.fi
.sp
.nf
.ft C
/*\-
 * Copyright (c) 2006 Verdens Gang AS
 * Copyright (c) 2006\-2009 Linpro AS
 * All rights reserved.
 *
 * Author: Poul\-Henning Kamp <phk@phk.freebsd.dk>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \(ga\(gaAS IS\(aq\(aq AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR 
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $Id$
 *
 * The default VCL code.
 *
 * NB! You do NOT need to copy & paste all of these functions into your
 * own vcl code, if you do not provide a definition of one of these
 * functions, the compiler will automatically fall back to the default
 * code from this file.
 *
 * This code will be prefixed with a backend declaration built from the
 * \-b argument.
 */

sub vcl_recv {
    if (req.restarts == 0) {
        if (req.http.x\-forwarded\-for) {
            set req.http.X\-Forwarded\-For =
                req.http.X\-Forwarded\-For ", " client.ip;
        } else {
            set req.http.X\-Forwarded\-For = client.ip;
        }
    }
    if (req.request != "GET" &&
      req.request != "HEAD" &&
      req.request != "PUT" &&
      req.request != "POST" &&
      req.request != "TRACE" &&
      req.request != "OPTIONS" &&
      req.request != "DELETE") {
        /* Non\-RFC2616 or CONNECT which is weird. */
        return (pipe);
    }
    if (req.request != "GET" && req.request != "HEAD") {
        /* We only deal with GET and HEAD by default */
        return (pass);
    }
    if (req.http.Authorization || req.http.Cookie) {
        /* Not cacheable by default */
        return (pass);
    }
    return (lookup);
}

sub vcl_pipe {
    # Note that only the first request to the backend will have
    # X\-Forwarded\-For set.  If you use X\-Forwarded\-For and want to
    # have it set for all requests, make sure to have:
    # set bereq.http.connection = "close";
    # here.  It is not set by default as it might break some broken web
    # applications, like IIS with NTLM authentication.
    return (pipe);
}

sub vcl_pass {
    return (pass);
}

sub vcl_hash {
    set req.hash += req.url;
    if (req.http.host) {
        set req.hash += req.http.host;
    } else {
        set req.hash += server.ip;
    }
    return (hash);
}

sub vcl_hit {
    if (!obj.cacheable) {
        return (pass);
    }
    return (deliver);
}

sub vcl_miss {
    return (fetch);
}

sub vcl_fetch {
    if (!beresp.cacheable) {
        return (pass);
    }
    if (beresp.http.Set\-Cookie) {
        return (pass);
    }
    return (deliver);
}

sub vcl_deliver {
    return (deliver);
}

sub vcl_error {
    set obj.http.Content\-Type = "text/html; charset=utf\-8";
    synthetic {"
<?xml version="1.0" encoding="utf\-8"?>
<!DOCTYPE html PUBLIC "\-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1\-strict.dtd">
<html>
  <head>
    <title>"} obj.status " " obj.response {"</title>
  </head>
  <body>
    <h1>Error "} obj.status " " obj.response {"</h1>
    <p>"} obj.response {"</p>
    <h3>Guru Meditation:</h3>
    <p>XID: "} req.xid {"</p>
    <hr>
    <p>Varnish cache server</p>
  </body>
</html>
"};
    return (deliver);
}

.ft P
.fi
.sp
The following example shows how to support multiple sites running on
separate backends in the same Varnish instance, by selecting backends
based on the request URL::
.sp
.nf
.ft C
backend www {
  .host = "www.example.com";
  .port = "80";
}

backend images {
  .host = "images.example.com";
  .port = "80";
}

sub vcl_recv {
  if (req.http.host ~ "^(www.)?example.com$") {
    set req.http.host = "www.example.com";
    set req.backend = www;
  } elsif (req.http.host ~ "^images.example.com$") {
    set req.backend = images;
  } else {
    error 404 "Unknown virtual host";
  }
}

The following snippet demonstrates how to force a minimum TTL for
all documents.  Note that this is not the same as setting the
default_ttl run\-time parameter, as that only affects document for
which the backend did not specify a TTL:::

sub vcl_fetch {
  if (beresp.ttl < 120s) {
    log "Adjusting TTL";
    set beresp.ttl = 120s;
  }
}
.ft P
.fi
.sp
The following snippet demonstrates how to force Varnish to cache
documents even when cookies are present::
.sp
.nf
.ft C
sub vcl_recv {
  if (req.request == "GET" && req.http.cookie) {
     return(lookup);
  }
}

sub vcl_fetch {
  if (beresp.http.Set\-Cookie) {
     return(deliver);
 }
}
.ft P
.fi
.sp
The following code implements the HTTP PURGE method as used by Squid
for object invalidation::
.sp
.nf
.ft C
acl purge {
  "localhost";
  "192.0.2.1"/24;
}

sub vcl_recv {
  if (req.request == "PURGE") {
    if (!client.ip ~ purge) {
      error 405 "Not allowed.";
    }
    return(lookup);
  }
}

sub vcl_hit {
  if (req.request == "PURGE") {
    set obj.ttl = 0s;
    error 200 "Purged.";
  }
}

sub vcl_miss {
  if (req.request == "PURGE") {
  error 404 "Not in cache.";
  }
}
.ft P
.fi
.SH SEE ALSO
.INDENT 0.0
.IP \(bu 2
.
varnishd(1)
.UNINDENT
.SH HISTORY
.sp
The VCL language was developed by Poul\-Henning Kamp in cooperation
with Verdens Gang AS, Linpro AS and Varnish Software.  This manual
page was written by Dag\-Erling Sm√∏rgrav and later edited by
Poul\-Henning Kamp and Per Buer.
.SH COPYRIGHT
.sp
This document is licensed under the same licence as Varnish
itself. See LICENCE for details.
.INDENT 0.0
.IP \(bu 2
.
Copyright (c) 2006 Verdens Gang AS
.IP \(bu 2
.
Copyright (c) 2006\-2008 Linpro AS
.IP \(bu 2
.
Copyright (c) 2008\-2010 Redpill Linpro AS
.IP \(bu 2
.
Copyright (c) 2010 Varnish Software AS
.UNINDENT
.SH AUTHOR
Dag-Erling Sm√∏rgrav, Poul-Henning Kamp, Kristian Lyngst√∏l, Per Buer
.\" Generated by docutils manpage writer.
.\" 
.
