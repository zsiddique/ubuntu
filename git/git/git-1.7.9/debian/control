Source: git
Section: vcs
Priority: optional
Maintainer: Gerrit Pape <pape@smarden.org>
Uploaders: Jonathan Nieder <jrnieder@gmail.com>
Build-Depends: libz-dev,
 libcurl4-gnutls-dev | libcurl3-gnutls-dev, libexpat1-dev,
 subversion, libsvn-perl | libsvn-core-perl,
 tcl8.5, gettext,
 cvs, cvsps, libdbd-sqlite3-perl,
 unzip, libio-pty-perl,
 dpkg-dev (>= 1.15.7~),
 libc6.1 (>= 2.10.2-6) [ia64]
Build-Depends-Indep: asciidoc (>> 8.0.0), xmlto, docbook-xsl (>> 1.72)
Standards-Version: 3.9.2.0
Homepage: http://git-scm.com/
Vcs-Git: http://smarden.org/git/git.git/

Package: git
Architecture: any
Depends: ${shlibs:Depends}, perl-modules, liberror-perl,
 git-man (>> ${source:Upstream-Version}), git-man (<< ${source:Upstream-Version}-.),
 libc6.1 (>= 2.10.2-6) [ia64]
Recommends: patch, less, rsync, ssh-client
Suggests: git-daemon-run | git-daemon-sysvinit,
 git-doc, git-el, git-arch, git-cvs, git-svn, git-email, git-gui, gitk, gitweb
Replaces: gitweb (<< 1:1.7.4~rc1),
 cogito (<< 0.16rc2-0), git-core (<< 1:1.7.0.4-1.)
Breaks: gitweb (<< 1:1.7.4~rc1),
 qgit (<< 1.5.5), git-buildpackage (<< 0.4.38), cogito (<= 0.18.2+),
 stgit (<< 0.15), stgit-contrib (<< 0.15), gitpkg (<< 0.15),
 guilt (<< 0.33), gitosis (<< 0.2+20090917-7),
 git-core (<< 1:1.7.0.4-1.)
Conflicts: git-core (<< 1:1.5.2~rc3-2.)
Provides: git-completion, git-core
Description: fast, scalable, distributed revision control system
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 This package provides the git main components with minimal dependencies.
 Additional functionality, e.g. a graphical user interface and revision
 tree visualizer, tools for interoperating with other VCS's, or a web
 interface, is provided as separate git* packages.

Package: git-man
Section: doc
Architecture: all
Replaces: git (<< 1:1.7.4~rc1),
 cogito (<< 0.16rc2-0), git-core (<< 1:1.7.0.4-1.)
Breaks: git (<< 1:1.7.4~rc1)
Description: fast, scalable, distributed revision control system (manual pages)
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 This package provides reference documentation for use by the 'man'
 utility and the 'git help' command.

Package: git-core
Architecture: all
Depends: git (>> 1:1.7.0.2)
Description: fast, scalable, distributed revision control system (obsolete)
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 This is a transitional dummy package.  The 'git-core' package has been
 renamed to 'git', which has been installed automatically.  This
 git-core package is now obsolete, and can safely be removed from the
 system if no other package depends on it.

Package: git-doc
Section: doc
Architecture: all
Suggests: git, git-arch, git-cvs, git-svn, git-email, gitk, gitweb
Description: fast, scalable, distributed revision control system (documentation)
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 This package provides the documentation.

Package: git-arch
Architecture: all
Depends: git (>> ${source:Upstream-Version}), git (<< ${source:Upstream-Version}-.), tla
Suggests: git-doc
Replaces: cogito (<< 0.16rc2-0)
Description: fast, scalable, distributed revision control system (arch interoperability)
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 This package provides tools for importing development history from arch
 repositories.

Package: git-cvs
Architecture: all
Depends: git (>> ${source:Upstream-Version}), git (<< ${source:Upstream-Version}-.), cvsps, libdbd-sqlite3-perl
Suggests: git-doc, cvs
Replaces: cogito (<< 0.16rc2-0)
Description: fast, scalable, distributed revision control system (cvs interoperability)
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 This package provides the git cvsimport, cvsexportcommit, and cvsserver
 tools, which allow Git to read from and write to CVS repositories and
 offer access over CVS protocol to Git repositories.
 .
 The git cvsimport tool can incrementally import from a repository that
 is being actively developed and only requires remote access over CVS
 protocol. Unfortunately, in many situations the import leads to
 incorrect results. For reliable, one-shot imports, cvs2git from the
 cvs2svn package or parsecvs may be a better fit.

Package: git-svn
Architecture: all
Depends: git (>> ${source:Upstream-Version}), git (<< ${source:Upstream-Version}-.), libsvn-perl | libsvn-core-perl, libwww-perl, libterm-readkey-perl
Suggests: git-doc, subversion
Replaces: cogito (<< 0.16rc2-0)
Description: fast, scalable, distributed revision control system (svn interoperability)
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 This package provides tools for interoperating with Subversion repositories,
 and importing SVN development history.

Package: git-email
Architecture: all
Depends: git (>> ${source:Upstream-Version}), git (<< ${source:Upstream-Version}-.)
Recommends: libemail-valid-perl, libnet-smtp-ssl-perl, libauthen-sasl-perl
Suggests: git-doc
Replaces: cogito (<< 0.16rc2-0)
Description: fast, scalable, distributed revision control system (email add-on)
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 This package provides the git-send-email program for sending series of
 patch emails.

Package: git-daemon-run
Architecture: all
Depends: git (>> ${source:Upstream-Version}), git (<< ${source:Upstream-Version}-.), runit (>= 1.8.0-2), adduser
Conflicts: git-daemon-sysvinit
Description: fast, scalable, distributed revision control system (git-daemon service)
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 git-daemon, as provided by the git package, is a simple server for git
 repositories, ideally suited for read-only updates, i.e. pulling from git
 repositories through the network.  This package provides a runit service
 for running git-daemon permanently.

Package: git-daemon-sysvinit
Architecture: all
Depends: git (>> ${source:Upstream-Version}), git (<< ${source:Upstream-Version}-.), adduser
Conflicts: git-daemon-run
Description: fast, scalable, distributed revision control system (git-daemon service)
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 git-daemon, as provided by the git package, is a simple server for git
 repositories, ideally suited for read-only updates, i.e. pulling from git
 repositories through the network.  This package provides a sysvinit service
 for running git-daemon permanently.

Package: git-gui
Architecture: all
Depends: git (>> ${source:Upstream-Version}), git (<< ${source:Upstream-Version}-.), tk
Replaces: git-core (<< 1:1.5.2.2-3)
Recommends: gitk
Suggests: git-doc
Description: fast, scalable, distributed revision control system (GUI)
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 This package provides the git graphical user interface.

Package: gitk
Architecture: all
Depends: git (>> ${source:Upstream-Version}), git (<< ${source:Upstream-Version}-.), tk (>= 8.4)
Suggests: git-doc
Replaces: cogito (<< 0.16rc2-0)
Description: fast, scalable, distributed revision control system (revision tree visualizer)
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 This package provides the gitk program, a tcl/tk revision tree visualizer.

Package: git-el
Architecture: all
Depends: git (>= 1:1.7.4.1-2~), emacs | emacsen
Replaces: git (<< 1:1.7.4.1-2~)
Breaks: git (<< 1:1.7.4.1-2~)
Description: fast, scalable, distributed revision control system (emacs support)
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 This package provides two modules for integration with Emacs:
 .
  * git.el:
 .
    Status manager that displays the state of all the files of the
    project and provides easy access to the most frequently used git
    commands. The user interface is intended to be similar to the
    pcl-cvs mode. It can be started with `M-x git-status'.
 .
  * git-blame.el:
 .
    Emacs implementation of incremental "git blame".  When you turn it
    on while viewing a file, the editor buffer will be updated by
    setting the background of individual lines to a color that reflects
    which commit it comes from.
 .
 This package does not contain the VC-mode backend for git. That is
 part of standard Emacs distributions, starting with version 22.2.
 .
 For a more polished Emacs interface for Git, see the magit package.

Package: gitweb
Architecture: all
Depends: git (>> ${source:Upstream-Version}), git (<< ${source:Upstream-Version}-.),
 perl, apache2 | httpd | lynx-cur
Suggests: httpd-cgi | libcgi-fast-perl, git-doc
Description: fast, scalable, distributed revision control system (web interface)
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 This package configures a web interface for browsing git repositories.
 .
 If apache2 is installed, the web interface is automatically made
 available at http://localhost/gitweb.  Other servers that support CGI
 or mod_perl are supported through manual configuration.
 .
 If libcgi-fast-perl is installed, gitweb can also be run over FastCGI
 (and served by nginx, for example).

Package: git-all
Architecture: all
Depends: git (>> ${source:Upstream-Version}), git (<< ${source:Upstream-Version}-.),
 git-doc, git-el, git-arch, git-cvs, git-svn, git-email, git-gui, gitk, gitweb
Recommends: git-daemon-run | git-daemon-sysvinit
Description: fast, scalable, distributed revision control system (all subpackages)
 Git is popular version control system designed to handle very large
 projects with speed and efficiency; it is used for many high profile
 open source projects, most notably the Linux kernel.
 .
 Git falls in the category of distributed source code management tools.
 Every Git working directory is a full-fledged repository with full
 revision tracking capabilities, not dependent on network access or a
 central server.
 .
 This is a dummy package which brings in all subpackages.
